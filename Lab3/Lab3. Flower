public abstract class Flower {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public abstract double getCost();

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Flower)) return false;

        Flower flower = (Flower) o;

        return name.equals(flower.name);
    }

    @Override
    public int hashCode() {
        return name.hashCode();
    }

    @Override
    public String toString() {
        return "Flower{" +
                "name='" + name + '\'' +
                '}';
    }
}

import java.util.HashMap;
import java.util.Map;

public class Bouquet {
    private Flower[] flowers;

    public Bouquet(Flower... flowers) {
        this.flowers = flowers;
    }

    public Flower[] getFlowers() {
        return flowers;
    }

    public double getBouquetCost() {
        double cost = 0.0;
        for (Flower flower : flowers) {
            cost += flower.getCost();
        }
        return cost;
    }

    @Override
    public String toString() {
        StringBuilder info = new StringBuilder("Букет состоит из:\n");
        Map<String, Integer> consist = getBouquetConsist();
        for (Map.Entry<String, Integer> pair : consist.entrySet()) {
            info.append(pair.getKey());
            info.append(" - ");
            info.append(pair.getValue());
            info.append(" шт\n");
        }
        return info.toString();
    }

    private Map<String, Integer> getBouquetConsist() {
        Map<String, Integer> consist = new HashMap<>();
        for (Flower flower : flowers) {
            if (!consist.containsKey(flower.getName())) {
                consist.put(flower.getName(), 1);
            } else {
                consist.put(flower.getName(), consist.get(flower.getName()) + 1);
            }
        }
        return consist;
    }
}

public class FlowerMarket {
    public enum Flowers {
        ROSE("Роза", 40), ASTER("Астра", 15), HERBERA("Гербера", 25), LILY("Лилия", 30), CARNATION("Гвоздика", 15), TULIP("Тюльпан", 5);

        Flowers(String name, double price) {
            this.name = name;
            this.price = price;
        }

        private final double price;
        private final String name;

        public double getPrice() {
            return price;
        }

        public String getName() {
            return name;
        }
    }

    public Flower getFlower(Flowers flower) {
        switch (flower) {
            case ROSE:
                return new Rose();
            case ASTER:
                return new Aster();
            case LILY:
                return new Lily();
            case HERBERA:
                return new Herbera();
            case TULIP:
                return new Tulip();
            case CARNATION:
                return new Carnation();
            default: return null;
        }
    }

    public Bouquet getBouquet(Flowers... flowers) {
        Flower[] flower = new Flower[flowers.length];
        for (int i = 0; i < flowers.length; i++) {
            flower[i] = getFlower(flowers[i]);
        }
        return new Bouquet(flower);
    }
}

import java.util.Locale;

import static FlowerMarket.Flowers.*;

public class Demo {
    public static void main(String[] args) {
        FlowerMarket market = new FlowerMarket();

        Bouquet bouquet = market.getBouquet(ROSE, ROSE, ROSE, ROSE, ROSE);
        printInfo(bouquet);

        bouquet = market.getBouquet(LILY, CARNATION, TULIP, ASTER, ASTER, LILY, LILY);
        printInfo(bouquet);

        bouquet = market.getBouquet(ASTER, ASTER, ASTER);
        printInfo(bouquet);
    }

    private static void printInfo(Bouquet bouquet) {
        System.out.print(bouquet);
        System.out.printf(Locale.ROOT, "Стоимость букета: %.2f грн\n\n", bouquet.getBouquetCost());
    }
}
